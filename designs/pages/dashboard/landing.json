[
    {
        "id": "sd_UWEsrTmDSRRDnTPG",
        "type": "tab",
        "createdDate": "2024-06-27T07:07:21.203Z",
        "label": "landing",
        "disabled": false,
        "info": "",
        "functionSeq": 6,
        "generateNext": true,
        "serviceName": "landingComponent"
    },
    {
        "id": "sd_g8anwqOVxkl7dnK1",
        "type": "OnInit",
        "z": "sd_UWEsrTmDSRRDnTPG",
        "viewType": "common",
        "nodeType": "start",
        "name": "",
        "inputVariables": [],
        "localVariables": [],
        "outputVariables": [],
        "pageVariables": [],
        "functionName": "sd_g8anwqOVxkl7dnK1",
        "category": "Lifecycle Events",
        "x": 45,
        "y": 60,
        "wires": [
            [
                "sd_oVwRlrUvGw6hhxZi"
            ]
        ],
        "__n_excludedFromValidation__": {},
        "generateNext": true,
        "serviceName": "landingComponent"
    },
    {
        "id": "sd_oVwRlrUvGw6hhxZi",
        "type": "PageVariables",
        "z": "sd_UWEsrTmDSRRDnTPG",
        "viewType": "pages",
        "nodeType": "flow",
        "name": "",
        "inputs": 1,
        "outputs": 1,
        "operation": "set",
        "globalVariables": [
            {
                "textIp": "lineChartData",
                "typedIpValue": {
                    "type": "this.page",
                    "value": "lineChartData"
                }
            },
            {
                "textIp": "lineChartLabels",
                "typedIpValue": {
                    "type": "this.page",
                    "value": "lineChartLabels"
                }
            },
            {
                "textIp": "pieChartLabels",
                "typedIpValue": {
                    "type": "this.page",
                    "value": "pieChartLabels"
                }
            },
            {
                "textIp": "pieChartOptions",
                "typedIpValue": {
                    "type": "this.page",
                    "value": "pieChartOptions"
                }
            },
            {
                "textIp": "pieChartData",
                "typedIpValue": {
                    "type": "this.page",
                    "value": "pieChartData"
                }
            },
            {
                "textIp": "currentDate",
                "typedIpValue": {
                    "type": "this.page",
                    "value": "currentDate"
                }
            },
            {
                "textIp": "currentMonth",
                "typedIpValue": {
                    "type": "this.page",
                    "value": "currentMonth"
                }
            },
            {
                "textIp": "currentYear",
                "typedIpValue": {
                    "type": "this.page",
                    "value": "currentYear"
                }
            },
            {
                "textIp": "startDate",
                "typedIpValue": {
                    "type": "this.page",
                    "value": "startDate"
                }
            },
            {
                "textIp": "endDate",
                "typedIpValue": {
                    "type": "this.page",
                    "value": "endDate"
                }
            },
            {
                "textIp": "monthNames",
                "typedIpValue": {
                    "type": "literal",
                    "value": "[   \"January\", \"February\", \"March\", \"April\", \"May\", \"June\",   \"July\", \"August\", \"September\", \"October\", \"November\", \"December\" ]"
                }
            },
            {
                "textIp": "monthName",
                "typedIpValue": {
                    "type": "this.page",
                    "value": "monthName"
                }
            },
            {
                "textIp": "newLineData",
                "typedIpValue": {
                    "type": "this.page",
                    "value": "newLineData"
                }
            }
        ],
        "functionName": "sd_oVwRlrUvGw6hhxZi",
        "category": "Function",
        "x": 165,
        "y": 60,
        "wires": [
            [
                "sd_2l8EVQOKmVRV14Om",
                "sd_zgDzU2ECixcC1ak6"
            ]
        ],
        "__n_excludedFromValidation__": {},
        "generateNext": false,
        "serviceName": "landingComponent",
        "generated": true
    },
    {
        "id": "sd_HqphZUawWwBmzlQe",
        "type": "Environment",
        "z": "sd_UWEsrTmDSRRDnTPG",
        "viewType": "client-pages",
        "nodeType": "flow",
        "name": "",
        "outputs": 1,
        "envMaps": [
            {
                "flowVar": {
                    "type": "bh",
                    "value": "url"
                },
                "envProperty": "ssdURL"
            }
        ],
        "functionName": "sd_HqphZUawWwBmzlQe",
        "category": "General",
        "x": 365,
        "y": 60,
        "wires": [
            [
                "sd_RDN6unfHnk0O5Kfz"
            ]
        ],
        "__n_excludedFromValidation__": {},
        "generateNext": true,
        "serviceName": "landingComponent"
    },
    {
        "id": "sd_RDN6unfHnk0O5Kfz",
        "type": "Script",
        "z": "sd_UWEsrTmDSRRDnTPG",
        "viewType": "common",
        "nodeType": "flow",
        "name": "",
        "script": "bh.url = bh.url + 'get-receipt-data'",
        "functionName": "sd_RDN6unfHnk0O5Kfz",
        "category": "Function",
        "x": 425,
        "y": 60,
        "wires": [
            [
                "sd_F2ZToH6C34R0qqKu"
            ]
        ],
        "__n_excludedFromValidation__": {},
        "generateNext": true,
        "serviceName": "landingComponent"
    },
    {
        "id": "sd_F2ZToH6C34R0qqKu",
        "type": "HttpRequest",
        "z": "sd_UWEsrTmDSRRDnTPG",
        "viewType": "client-pages",
        "nodeType": "flow",
        "name": "get-receipts",
        "method": "get",
        "methodMapping": "",
        "methodMappingObj": {},
        "urlMapping": "bh.url",
        "urlMappingObj": {
            "mapVarType": "bh",
            "mapVarValue": "url"
        },
        "ret": "json",
        "retMapping": "",
        "retMappingObj": {},
        "observe": "",
        "observeMapping": "",
        "observeMappingObj": {},
        "reportProgress": false,
        "withCreds": false,
        "reqBody": "",
        "reqBodyObj": {
            "mapVarType": "this.page",
            "mapVarValue": ""
        },
        "resultMapping": "this.page.resultReceipts",
        "resultMappingObj": {
            "mapVarType": "this.page",
            "mapVarValue": "resultReceipts"
        },
        "headers": {},
        "headersObj": [],
        "headerMapping": "",
        "headerMappingObj": {},
        "params": {},
        "paramsObj": [],
        "paramMapping": "",
        "paramMappingObj": {},
        "functionName": "getReceipts",
        "category": "HTTP",
        "x": 525,
        "y": 60,
        "wires": [
            [
                "sd_qzr4I51Z7TShqyIx"
            ]
        ],
        "__n_excludedFromValidation__": {},
        "generateNext": true,
        "serviceName": "landingComponent"
    },
    {
        "id": "sd_I8cgmZAyUMYw2KLe",
        "type": "Script",
        "z": "sd_UWEsrTmDSRRDnTPG",
        "viewType": "common",
        "nodeType": "flow",
        "name": "",
        "script": "\n\nbh.local.dataSource = new MatTableDataSource(page.resultReceipts);\nconsole.log(page.resultReceipts)\nconsole.log(bh.local.MatPaginator)\n\n\n\n",
        "functionName": "sd_I8cgmZAyUMYw2KLe",
        "category": "Function",
        "x": 705,
        "y": 60,
        "wires": [
            [
                "sd_2JXWvVyCSaWUOSSi"
            ]
        ],
        "__n_excludedFromValidation__": {},
        "generateNext": true,
        "serviceName": "landingComponent"
    },
    {
        "id": "sd_qzr4I51Z7TShqyIx",
        "type": "PageVariables",
        "z": "sd_UWEsrTmDSRRDnTPG",
        "viewType": "pages",
        "nodeType": "flow",
        "name": "",
        "inputs": 1,
        "outputs": 1,
        "operation": "set",
        "globalVariables": [
            {
                "textIp": "tableData",
                "typedIpValue": {
                    "type": "bh.local",
                    "value": "dataSource"
                }
            }
        ],
        "functionName": "sd_qzr4I51Z7TShqyIx",
        "category": "Function",
        "x": 605,
        "y": 60,
        "wires": [
            [
                "sd_I8cgmZAyUMYw2KLe"
            ]
        ],
        "__n_excludedFromValidation__": {},
        "generateNext": true,
        "serviceName": "landingComponent"
    },
    {
        "id": "sd_2l8EVQOKmVRV14Om",
        "type": "UseDependency",
        "z": "sd_UWEsrTmDSRRDnTPG",
        "viewType": "client-pages",
        "nodeType": "flow",
        "name": "",
        "inputs": 1,
        "outputs": 1,
        "property": "",
        "propertyType": "bh",
        "propertyGv": "bh.",
        "alias": "",
        "modules": [
            {
                "textIp": "Router",
                "typedIpValue": {
                    "type": "this.page",
                    "value": "router"
                },
                "injectable": true
            }
        ],
        "import_all": false,
        "library": "@angular/router",
        "serviceDesignerType": "pages",
        "functionName": "sd_2l8EVQOKmVRV14Om",
        "category": "Function",
        "x": 285,
        "y": 60,
        "wires": [
            [
                "sd_F27d4EoalWd068UB"
            ]
        ],
        "__n_excludedFromValidation__": {},
        "generateNext": false,
        "serviceName": "landingComponent",
        "generated": true
    },
    {
        "id": "sd_IFPuG9EBlYn7BebM",
        "type": "PageStart",
        "z": "sd_UWEsrTmDSRRDnTPG",
        "viewType": "pages",
        "nodeType": "start",
        "name": "Open form",
        "outputs": 1,
        "inputVariables": [],
        "localVariables": [],
        "flow_type": "sync",
        "functionName": "openForm",
        "category": "General",
        "x": 65,
        "y": 560,
        "wires": [
            [
                "sd_TetSjqbxmzLs0g9j"
            ]
        ],
        "__n_excludedFromValidation__": {},
        "generateNext": true,
        "serviceName": "landingComponent"
    },
    {
        "id": "sd_TetSjqbxmzLs0g9j",
        "type": "Navigation",
        "z": "sd_UWEsrTmDSRRDnTPG",
        "viewType": "client-pages",
        "nodeType": "flow",
        "name": "",
        "path": "/operations_dashboard/add_receipt",
        "pathMap": "",
        "pathparams": "",
        "pathparamsMap": "",
        "qparams": "",
        "qparamsMap": "",
        "qparamsArray": "",
        "resultMapping": "",
        "functionName": "sd_TetSjqbxmzLs0g9j",
        "category": "Navigation",
        "x": 190,
        "y": 560,
        "wires": [
            []
        ],
        "__n_excludedFromValidation__": {},
        "generateNext": false,
        "serviceName": "landingComponent",
        "generated": true
    },
    {
        "id": "sd_WmlEAXUFzL4FCZeY",
        "type": "AfterViewInit",
        "z": "sd_UWEsrTmDSRRDnTPG",
        "viewType": "common",
        "nodeType": "start",
        "name": "",
        "functionName": "ngAfterViewInit",
        "category": "Lifecycle Events",
        "x": 65,
        "y": 700,
        "wires": [
            [
                "sd_a7QyryciA6UddZ9I"
            ]
        ],
        "__n_excludedFromValidation__": {},
        "generateNext": true,
        "serviceName": "landingComponent"
    },
    {
        "id": "sd_a7QyryciA6UddZ9I",
        "type": "ViewPicker",
        "z": "sd_UWEsrTmDSRRDnTPG",
        "viewType": "common",
        "nodeType": "flow",
        "name": "",
        "outputs": 1,
        "childViewVariables": [
            {
                "key": {
                    "type": "literal",
                    "value": "MatPaginator"
                },
                "defaultValue": "",
                "isViewChildren": false
            }
        ],
        "functionName": "sd_xKCCTWKzvgDN0rx7_6",
        "category": "Function",
        "x": 205,
        "y": 700,
        "wires": [
            [
                "sd_99AkiApW62Lh7f1v"
            ]
        ],
        "__n_excludedFromValidation__": {},
        "generateNext": false,
        "serviceName": "landingComponent",
        "generated": true
    },
    {
        "id": "sd_99AkiApW62Lh7f1v",
        "type": "Script",
        "z": "sd_UWEsrTmDSRRDnTPG",
        "viewType": "common",
        "nodeType": "flow",
        "name": "",
        "script": "this.page.tableData.paginator = this.MatPaginator;",
        "functionName": "sd_2VNGqvcKee34lvOz_6",
        "category": "Function",
        "x": 345,
        "y": 700,
        "wires": [
            []
        ],
        "__n_excludedFromValidation__": {},
        "generateNext": false,
        "serviceName": "landingComponent",
        "generated": true
    },
    {
        "id": "sd_2JXWvVyCSaWUOSSi",
        "type": "PageVariables",
        "z": "sd_UWEsrTmDSRRDnTPG",
        "viewType": "pages",
        "nodeType": "flow",
        "name": "",
        "inputs": 1,
        "outputs": 1,
        "operation": "set",
        "globalVariables": [
            {
                "textIp": "tableData",
                "typedIpValue": {
                    "type": "bh.local",
                    "value": "dataSource"
                }
            }
        ],
        "functionName": "sd_2JXWvVyCSaWUOSSi",
        "category": "Function",
        "x": 825,
        "y": 60,
        "wires": [
            []
        ],
        "__n_excludedFromValidation__": {},
        "generateNext": true,
        "serviceName": "landingComponent"
    },
    {
        "id": "sd_A27nuw79xKmoRPh6",
        "type": "PageStart",
        "z": "sd_UWEsrTmDSRRDnTPG",
        "viewType": "pages",
        "nodeType": "start",
        "name": "openDialog",
        "outputs": 1,
        "inputVariables": [],
        "localVariables": [],
        "flow_type": "sync",
        "functionName": "openDialog",
        "category": "General",
        "x": 205,
        "y": 860,
        "wires": [
            [
                "sd_kgGzbCuR6F9t3uGt"
            ]
        ],
        "__n_excludedFromValidation__": {},
        "generateNext": true,
        "serviceName": "landingComponent"
    },
    {
        "id": "sd_kgGzbCuR6F9t3uGt",
        "type": "OpenDialog",
        "z": "sd_UWEsrTmDSRRDnTPG",
        "viewType": "client-pages",
        "nodeType": "flow",
        "name": "",
        "outputs": 4,
        "flow": {
            "flowId": "sd_IwKGWaKGgP9yA6Xq",
            "label": "add_budget"
        },
        "relativePath": "app/components/dashboard/add_budget",
        "data": "this.page",
        "ariaDescribedBy": "this.page",
        "ariaLabel": "this.page",
        "ariaLabelledBy": "this.page",
        "autoFocus": "this.page",
        "backdropClass": "this.page",
        "closeOnNavigation": "this.page",
        "direction": "this.page",
        "disableClose": "this.page",
        "hasBackdrop": "this.page",
        "height": "this.page",
        "maxHeight": "this.page",
        "minHeight": "this.page",
        "width": "this.page",
        "maxWidth": "this.page",
        "minWidth": "this.page",
        "panelClass": "this.page",
        "position": "this.page",
        "restoreFocus": "this.page",
        "role": "this.page",
        "resultMapping": "this.page",
        "functionName": "sd_kgGzbCuR6F9t3uGt",
        "category": "Dialog",
        "x": 305,
        "y": 860,
        "wires": [
            [],
            [],
            [],
            []
        ],
        "__ssdTypeInputs__": {
            "data": {
                "type": "this.page",
                "value": "",
                "constant": false
            },
            "ariaDescribedBy": {
                "type": "this.page",
                "value": "",
                "constant": false
            },
            "ariaLabel": {
                "type": "this.page",
                "value": "",
                "constant": false
            },
            "ariaLabelledBy": {
                "type": "this.page",
                "value": "",
                "constant": false
            },
            "autoFocus": {
                "type": "this.page",
                "value": "",
                "constant": false
            },
            "backdropClass": {
                "type": "this.page",
                "value": "",
                "constant": false
            },
            "closeOnNavigation": {
                "type": "this.page",
                "value": "",
                "constant": false
            },
            "direction": {
                "type": "this.page",
                "value": "",
                "constant": false
            },
            "disableClose": {
                "type": "this.page",
                "value": "",
                "constant": false
            },
            "hasBackdrop": {
                "type": "this.page",
                "value": "",
                "constant": false
            },
            "height": {
                "type": "this.page",
                "value": "",
                "constant": false
            },
            "maxHeight": {
                "type": "this.page",
                "value": "",
                "constant": false
            },
            "minHeight": {
                "type": "this.page",
                "value": "",
                "constant": false
            },
            "width": {
                "type": "this.page",
                "value": "",
                "constant": false
            },
            "maxWidth": {
                "type": "this.page",
                "value": "",
                "constant": false
            },
            "minWidth": {
                "type": "this.page",
                "value": "",
                "constant": false
            },
            "panelClass": {
                "type": "this.page",
                "value": "",
                "constant": false
            },
            "position": {
                "type": "this.page",
                "value": "",
                "constant": false
            },
            "restoreFocus": {
                "type": "this.page",
                "value": "",
                "constant": false
            },
            "role": {
                "type": "this.page",
                "value": "",
                "constant": false
            },
            "resultMapping": {
                "type": "this.page",
                "value": "",
                "constant": false
            }
        },
        "__n_excludedFromValidation__": {},
        "generateNext": false,
        "serviceName": "landingComponent",
        "generated": true
    },
    {
        "id": "sd_zgDzU2ECixcC1ak6",
        "type": "Script",
        "z": "sd_UWEsrTmDSRRDnTPG",
        "viewType": "common",
        "nodeType": "flow",
        "name": "Get Monthly Date",
        "script": "page.currentDate = new Date();\npage.currentMonth = page.currentDate.getMonth();\npage.currentYear = page.currentDate.getFullYear();\n\n// Get the start and end date of the current month\npage.startDate = new Date(page.currentYear, page.currentMonth, 1);\npage.endDate = new Date(page.currentYear, page.currentMonth + 1, 0);\n\npage.monthNames = [\n  \"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\n  \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\n];\n\npage.monthName = page.monthNames[page.currentMonth];\n\npage.thisMonthRangeDate = `${page.monthName} ${page.startDate.getDate()} - ${page.monthName} ${page.endDate.getDate()} , ${page.currentYear}`\n\n",
        "functionName": "getMonthlyDate",
        "category": "Function",
        "x": 85,
        "y": 180,
        "wires": [
            []
        ],
        "__n_excludedFromValidation__": {},
        "generateNext": false,
        "serviceName": "landingComponent",
        "generated": true
    },
    {
        "id": "sd_vUvXw8Y3lnhbpYIv",
        "type": "Environment",
        "z": "sd_UWEsrTmDSRRDnTPG",
        "viewType": "client-pages",
        "nodeType": "flow",
        "name": "",
        "outputs": 1,
        "envMaps": [
            {
                "flowVar": {
                    "type": "bh",
                    "value": "ssdURL"
                },
                "envProperty": "ssdURL"
            }
        ],
        "functionName": "sd_vUvXw8Y3lnhbpYIv",
        "category": "General",
        "x": 585,
        "y": 200,
        "wires": [
            [
                "sd_9jVuoDurVkeCshlO"
            ]
        ],
        "__n_excludedFromValidation__": {},
        "generateNext": false,
        "serviceName": "landingComponent",
        "generated": true
    },
    {
        "id": "sd_9jVuoDurVkeCshlO",
        "type": "Script",
        "z": "sd_UWEsrTmDSRRDnTPG",
        "viewType": "common",
        "nodeType": "flow",
        "name": "",
        "script": "bh.ssdURL = bh.ssdURL + 'get-budget'",
        "functionName": "sd_9jVuoDurVkeCshlO",
        "category": "Function",
        "x": 685,
        "y": 200,
        "wires": [
            [
                "sd_dBpXjBZ3VAm2xzVs"
            ]
        ],
        "__n_excludedFromValidation__": {},
        "generateNext": false,
        "serviceName": "landingComponent",
        "generated": true
    },
    {
        "id": "sd_dBpXjBZ3VAm2xzVs",
        "type": "HttpRequest",
        "z": "sd_UWEsrTmDSRRDnTPG",
        "viewType": "client-pages",
        "nodeType": "flow",
        "name": "",
        "method": "get",
        "methodMapping": "",
        "methodMappingObj": {},
        "urlMapping": "bh.ssdURL",
        "urlMappingObj": {
            "mapVarType": "bh",
            "mapVarValue": "ssdURL"
        },
        "ret": "json",
        "retMapping": "",
        "retMappingObj": {},
        "observe": "",
        "observeMapping": "",
        "observeMappingObj": {},
        "reportProgress": false,
        "withCreds": false,
        "reqBody": "",
        "reqBodyObj": {
            "mapVarType": "this.page",
            "mapVarValue": ""
        },
        "resultMapping": "this.page.result",
        "resultMappingObj": {
            "mapVarType": "this.page",
            "mapVarValue": "result"
        },
        "headers": {},
        "headersObj": [],
        "headerMapping": "",
        "headerMappingObj": {},
        "params": {},
        "paramsObj": [],
        "paramMapping": "",
        "paramMappingObj": {},
        "functionName": "sd_dBpXjBZ3VAm2xzVs",
        "category": "HTTP",
        "x": 790,
        "y": 200,
        "wires": [
            [
                "sd_CgrszF5ITUXVawZm"
            ]
        ],
        "__n_excludedFromValidation__": {},
        "generateNext": false,
        "serviceName": "landingComponent",
        "generated": true
    },
    {
        "id": "sd_CgrszF5ITUXVawZm",
        "type": "Script",
        "z": "sd_UWEsrTmDSRRDnTPG",
        "viewType": "common",
        "nodeType": "flow",
        "name": "getting current month budget",
        "script": "let months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n\npage.currentMonthBugetAmt;\n\npage.findCurrBudget = page.result[0].budget.filter((budget) => {\n    if(budget.month == months[new Date().getMonth()])\n    {\n        page.currentMonthBugetAmt = budget.amount\n    }\n})\n\n",
        "functionName": "gettingCurrentMonthBudget",
        "category": "Function",
        "x": 925,
        "y": 200,
        "wires": [
            [
                "sd_fuoLcsRnYFq7cDyH",
                "sd_cC8X4aU4RlF9xXxn"
            ]
        ],
        "__n_excludedFromValidation__": {},
        "generateNext": false,
        "serviceName": "landingComponent",
        "generated": true
    },
    {
        "id": "sd_fuoLcsRnYFq7cDyH",
        "type": "Script",
        "z": "sd_UWEsrTmDSRRDnTPG",
        "viewType": "common",
        "nodeType": "flow",
        "name": "getting accumulated Annual",
        "script": "page.data = page.result[0].budget\npage.budgetAmount = []\npage.data.forEach(item => {\n  page.budgetAmount.push(item.amount)\n});\n\npage.accumulatedAnnual = page.budgetAmount.reduce((accumulator, currentValue) => accumulator + currentValue, 0)\n",
        "functionName": "gettingAccumulatedAnnual",
        "category": "Function",
        "x": 1065,
        "y": 280,
        "wires": [
            []
        ],
        "__n_excludedFromValidation__": {},
        "generateNext": false,
        "serviceName": "landingComponent",
        "generated": true
    },
    {
        "id": "sd_P2pfUhNMAOXpl7us",
        "type": "Script",
        "z": "sd_UWEsrTmDSRRDnTPG",
        "viewType": "common",
        "nodeType": "flow",
        "name": "",
        "script": "bh.url3 = bh.url3 + 'get-receipt'\nbh.url4 = bh.url4 + 'get-budget'\n",
        "functionName": "sd_P2pfUhNMAOXpl7us",
        "category": "Function",
        "x": 545,
        "y": 460,
        "wires": [
            [
                "sd_d1wEqhb2I0Az2Gig"
            ]
        ],
        "__n_excludedFromValidation__": {},
        "generateNext": false,
        "serviceName": "landingComponent",
        "generated": true
    },
    {
        "id": "sd_hd1tYEWeV3FFJDsW",
        "type": "HttpRequest",
        "z": "sd_UWEsrTmDSRRDnTPG",
        "viewType": "client-pages",
        "nodeType": "flow",
        "name": "",
        "method": "get",
        "methodMapping": "",
        "methodMappingObj": {},
        "urlMapping": "bh.url3",
        "urlMappingObj": {
            "mapVarType": "bh",
            "mapVarValue": "url3"
        },
        "ret": "json",
        "retMapping": "",
        "retMappingObj": {},
        "observe": "",
        "observeMapping": "",
        "observeMappingObj": {},
        "reportProgress": false,
        "withCreds": false,
        "reqBody": "",
        "reqBodyObj": {
            "mapVarType": "this.page",
            "mapVarValue": ""
        },
        "resultMapping": "this.page.receiptData",
        "resultMappingObj": {
            "mapVarType": "this.page",
            "mapVarValue": "receiptData"
        },
        "headers": {},
        "headersObj": [],
        "headerMapping": "",
        "headerMappingObj": {},
        "params": {},
        "paramsObj": [],
        "paramMapping": "",
        "paramMappingObj": {},
        "functionName": "sd_hd1tYEWeV3FFJDsW",
        "category": "HTTP",
        "x": 785,
        "y": 460,
        "wires": [
            [
                "sd_cC8X4aU4RlF9xXxn",
                "sd_NDGNkGNOMv3LdRki"
            ]
        ],
        "__n_excludedFromValidation__": {},
        "generateNext": false,
        "serviceName": "landingComponent",
        "generated": true
    },
    {
        "id": "sd_cC8X4aU4RlF9xXxn",
        "type": "Script",
        "z": "sd_UWEsrTmDSRRDnTPG",
        "viewType": "common",
        "nodeType": "flow",
        "name": "Find expenses spent by month",
        "script": "page.annualAccumulatedExpenses = 0;\n\nlet nData = page.receiptData\nnData.forEach(entry => {\n  page.annualAccumulatedExpenses += entry.total;\n});\n\nconst currentDate = new Date();\nconst currentMonth = currentDate.getMonth(); \nconst currentYear = currentDate.getFullYear();\n\n// Initialize the sum for totals\npage.sumTotal = 0;\n\nlet data = page.receiptData\n// Loop through the data array and calculate the sum of totals for the current month\ndata.forEach(item => {\n  // Extract the month and year from the Date-Uploaded field\n  const uploadedDate = new Date(item[\"Date-Uploaded\"]);\n  const uploadedMonth = uploadedDate.getMonth(); \n  const uploadedYear = uploadedDate.getFullYear();\n\n  // Check if the month and year match the current month and year\n  if (uploadedMonth === currentMonth && uploadedYear === currentYear) {\n    page.sumTotal += item.total;\n  }\n});\n\n// console.log(`Sum of totals for ${currentDate.toLocaleString('default', { month: 'long' })} ${currentYear}: ${page.sumTotal.toFixed(2)}`);\n\n\npage.savings = Math.abs(page.sumTotal - page.currentMonthBugetAmt);\n\npage.doughnutChartData = [\n  {data: [page.currentMonthBugetAmt, page.savings, page.sumTotal ], label: \"Budget; Savings; Expenses\"},\n]\n\npage.doughnutChartLabels = ['Budget', 'Savings', 'Expenses'];\n\n",
        "functionName": "findExpensesSpentByMonth",
        "category": "Function",
        "x": 925,
        "y": 460,
        "wires": [
            []
        ],
        "__n_excludedFromValidation__": {},
        "generateNext": false,
        "serviceName": "landingComponent",
        "generated": true
    },
    {
        "id": "sd_iHHgiJl1FT8ENppO",
        "type": "Environment",
        "z": "sd_UWEsrTmDSRRDnTPG",
        "viewType": "client-pages",
        "nodeType": "flow",
        "name": "",
        "outputs": 1,
        "envMaps": [
            {
                "flowVar": {
                    "type": "bh",
                    "value": "url3"
                },
                "envProperty": "ssdURL"
            },
            {
                "flowVar": {
                    "type": "bh",
                    "value": "url4"
                },
                "envProperty": "ssdURL"
            }
        ],
        "functionName": "sd_iHHgiJl1FT8ENppO",
        "category": "General",
        "x": 425,
        "y": 460,
        "wires": [
            [
                "sd_P2pfUhNMAOXpl7us"
            ]
        ],
        "__n_excludedFromValidation__": {},
        "generateNext": false,
        "serviceName": "landingComponent",
        "generated": true
    },
    {
        "id": "sd_F27d4EoalWd068UB",
        "type": "PageCallService",
        "z": "sd_UWEsrTmDSRRDnTPG",
        "viewType": "pages",
        "nodeType": "flow",
        "name": "getReceiptD",
        "outputs": 1,
        "isValidNode": true,
        "noerr": 0,
        "service": {
            "id": "sd_UWEsrTmDSRRDnTPG",
            "type": "tab",
            "createdDate": "2024-06-27T07:07:21.203Z",
            "label": "landing",
            "disabled": false,
            "info": "",
            "functionSeq": 6
        },
        "flow": {
            "flowId": "sd_aUrDhh0olpySfMuW",
            "flowName": "getReceiptData"
        },
        "inputVariables": [],
        "outputMapping": [],
        "serviceImportPath": "./",
        "startName": "getReceiptData",
        "inputParams": [],
        "accept_bh": false,
        "accept_csd": false,
        "functionName": "getReceiptD",
        "category": "General",
        "x": 365,
        "y": 340,
        "wires": [
            [
                "sd_mvbmnglvGhpSeZzR"
            ]
        ],
        "__n_excludedFromValidation__": {},
        "generateNext": false,
        "serviceName": "landingComponent",
        "generated": true
    },
    {
        "id": "sd_aUrDhh0olpySfMuW",
        "type": "PageStart",
        "z": "sd_UWEsrTmDSRRDnTPG",
        "viewType": "pages",
        "nodeType": "start",
        "name": "getReceiptData",
        "outputs": 1,
        "inputVariables": [],
        "localVariables": [],
        "flow_type": "sync",
        "functionName": "getReceiptData",
        "category": "General",
        "x": 325,
        "y": 460,
        "wires": [
            [
                "sd_iHHgiJl1FT8ENppO"
            ]
        ],
        "__n_excludedFromValidation__": {},
        "generateNext": true,
        "serviceName": "landingComponent"
    },
    {
        "id": "sd_PtcKuhrJBxCvGj2j",
        "type": "PageStart",
        "z": "sd_UWEsrTmDSRRDnTPG",
        "viewType": "pages",
        "nodeType": "start",
        "name": "getThisMonthBudget",
        "outputs": 1,
        "inputVariables": [],
        "localVariables": [],
        "flow_type": "sync",
        "functionName": "getThisMonthBudget",
        "category": "General",
        "x": 465,
        "y": 200,
        "wires": [
            [
                "sd_vUvXw8Y3lnhbpYIv"
            ]
        ],
        "__n_excludedFromValidation__": {},
        "generateNext": true,
        "serviceName": "landingComponent"
    },
    {
        "id": "sd_mvbmnglvGhpSeZzR",
        "type": "PageCallService",
        "z": "sd_UWEsrTmDSRRDnTPG",
        "viewType": "pages",
        "nodeType": "flow",
        "name": "getThisMonthB",
        "outputs": 1,
        "isValidNode": true,
        "noerr": 0,
        "service": {
            "id": "sd_UWEsrTmDSRRDnTPG",
            "type": "tab",
            "createdDate": "2024-06-27T07:07:21.203Z",
            "label": "landing",
            "disabled": false,
            "info": "",
            "functionSeq": 6
        },
        "flow": {
            "flowId": "sd_PtcKuhrJBxCvGj2j",
            "flowName": "getThisMonthBudget"
        },
        "inputVariables": [],
        "outputMapping": [],
        "serviceImportPath": "./",
        "startName": "getThisMonthBudget",
        "inputParams": [],
        "accept_bh": false,
        "accept_csd": false,
        "functionName": "getThisMonthB",
        "category": "General",
        "x": 461,
        "y": 343.1354064941406,
        "wires": [
            []
        ],
        "__n_excludedFromValidation__": {},
        "generateNext": false,
        "serviceName": "landingComponent",
        "generated": true
    },
    {
        "id": "sd_NDGNkGNOMv3LdRki",
        "type": "Script",
        "z": "sd_UWEsrTmDSRRDnTPG",
        "viewType": "common",
        "nodeType": "flow",
        "name": "Finding expenses for another chart",
        "script": "// Function to parse the month and year from the date\nfunction parseMonth(dateStr) {\n  const date = new Date(dateStr);\n  const month = date.getMonth(); \n  const monthNames = [\n    \"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\n    \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\n  ];\n  return monthNames[month];\n}\n\n// Create a map to store the totals for each month\nconst monthlyTotalsMap = {};\nlet nData = page.receiptData\n\n// Iterate through the data and update the map\nnData.forEach(entry => {\n  const month = parseMonth(entry[\"Date-Uploaded\"]);\n  if (!monthlyTotalsMap[month]) {\n    monthlyTotalsMap[month] = 0;\n  }\n  monthlyTotalsMap[month] += entry.total;\n});\n\n// Separate the keys and values into two arrays\nconst months = Object.keys(monthlyTotalsMap);\npage.monthlyExpenses = Object.values(monthlyTotalsMap);\n\n",
        "functionName": "findingExpensesForAnotherChart",
        "category": "Function",
        "x": 745,
        "y": 580,
        "wires": [
            [
                "sd_S0K4PVYTwA5CWVJR"
            ]
        ],
        "__n_excludedFromValidation__": {},
        "generateNext": false,
        "serviceName": "landingComponent",
        "generated": true
    },
    {
        "id": "sd_S0K4PVYTwA5CWVJR",
        "type": "Script",
        "z": "sd_UWEsrTmDSRRDnTPG",
        "viewType": "common",
        "nodeType": "flow",
        "name": "remove script",
        "script": "page.months = [];\npage.amounts = [];\n\nlet data = page.allYearBudget[0]\n\ndata.budget.forEach(item => {\n  page.months.push(item.month);\n  page.amounts.push(item.amount);\n});\n\n",
        "functionName": "removeScript",
        "category": "Function",
        "x": 905,
        "y": 580,
        "wires": [
            [
                "sd_TJlWfc1iU8Kw4uHL"
            ]
        ],
        "__n_excludedFromValidation__": {},
        "generateNext": false,
        "serviceName": "landingComponent",
        "generated": true
    },
    {
        "id": "sd_TJlWfc1iU8Kw4uHL",
        "type": "Script",
        "z": "sd_UWEsrTmDSRRDnTPG",
        "viewType": "common",
        "nodeType": "flow",
        "name": "chart data",
        "script": "page.dataSet =[\n    {data: page.monthlyExpenses, label: \"Expenses\"}\n]\n\npage.barChartLabels = [\n    {data: page.months}\n]\n\npage.barChartLabels = page.barChartLabels[0].data\n\n\n",
        "functionName": "chartData",
        "category": "Function",
        "x": 1005,
        "y": 580,
        "wires": [
            [
                "sd_UawrgOePVwDuGaja"
            ]
        ],
        "__n_excludedFromValidation__": {},
        "generateNext": false,
        "serviceName": "landingComponent",
        "generated": true
    },
    {
        "id": "sd_d1wEqhb2I0Az2Gig",
        "type": "HttpRequest",
        "z": "sd_UWEsrTmDSRRDnTPG",
        "viewType": "client-pages",
        "nodeType": "flow",
        "name": "",
        "method": "get",
        "methodMapping": "",
        "methodMappingObj": {},
        "urlMapping": "bh.url4",
        "urlMappingObj": {
            "mapVarType": "bh",
            "mapVarValue": "url4"
        },
        "ret": "json",
        "retMapping": "",
        "retMappingObj": {},
        "observe": "",
        "observeMapping": "",
        "observeMappingObj": {},
        "reportProgress": false,
        "withCreds": false,
        "reqBody": "",
        "reqBodyObj": {
            "mapVarType": "this.page",
            "mapVarValue": ""
        },
        "resultMapping": "this.page.allYearBudget",
        "resultMappingObj": {
            "mapVarType": "this.page",
            "mapVarValue": "allYearBudget"
        },
        "headers": {},
        "headersObj": [],
        "headerMapping": "",
        "headerMappingObj": {},
        "params": {},
        "paramsObj": [],
        "paramMapping": "",
        "paramMappingObj": {},
        "functionName": "sd_d1wEqhb2I0Az2Gig",
        "category": "HTTP",
        "x": 660,
        "y": 460,
        "wires": [
            [
                "sd_hd1tYEWeV3FFJDsW"
            ]
        ],
        "__n_excludedFromValidation__": {},
        "generateNext": false,
        "serviceName": "landingComponent",
        "generated": true
    },
    {
        "id": "sd_UawrgOePVwDuGaja",
        "type": "Script",
        "z": "sd_UWEsrTmDSRRDnTPG",
        "viewType": "common",
        "nodeType": "flow",
        "name": "adjusting data for another chart",
        "script": "page.dataSet1 =[\n    {data: page.amounts, label: \"Budget\" },\n    {data: page.monthlyExpenses, label: \"Expenses\"}\n]\n\nlet data = page.dataSet1\n\nconst budget = data[0].data;\nconst expenses = data[1].data;\n\n// Calculate savings with non-negative values\nconst savings = budget.map((budgetAmount, index) => {\n  const expenseAmount = expenses[index] || 0; // Handle case if expenses have fewer elements\n  return Math.abs(budgetAmount - expenseAmount);\n});\n\n// Create the savings object\nconst savingsObject = {\n  data: savings,\n  label: \"Savings\"\n};\n\npage.monthlySavings = savingsObject.data\n\npage.donoughtDataSet = [\n  {data: page.amounts, label: \"Budget\" },\n  {data: page.monthlyExpenses, label: \"Expenses\"},\n  {data: page.monthlySavings, label: \"Savings\"}\n]\n\n",
        "functionName": "adjustingDataForAnotherChart",
        "category": "Function",
        "x": 1105,
        "y": 560,
        "wires": [
            []
        ],
        "__n_excludedFromValidation__": {},
        "generateNext": false,
        "serviceName": "landingComponent",
        "generated": true
    }
]
