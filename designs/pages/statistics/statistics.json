[
    {
        "id": "sd_EHqxhFZBDfBQcB9S",
        "type": "tab",
        "createdDate": "2024-06-27T07:11:21.688Z",
        "label": "statistics",
        "disabled": false,
        "info": "",
        "functionSeq": 0,
        "generateNext": true,
        "serviceName": "statisticsComponent"
    },
    {
        "id": "sd_3m0sCIP8PgQqxbRf",
        "type": "OnInit",
        "z": "sd_EHqxhFZBDfBQcB9S",
        "viewType": "common",
        "nodeType": "start",
        "name": "",
        "inputVariables": [],
        "localVariables": [],
        "outputVariables": [],
        "pageVariables": [],
        "functionName": "sd_3m0sCIP8PgQqxbRf",
        "category": "Lifecycle Events",
        "x": 85,
        "y": 60,
        "wires": [
            [
                "sd_HmysSc28zLxg8P5S"
            ]
        ],
        "__n_excludedFromValidation__": {},
        "generateNext": true,
        "serviceName": "statisticsComponent"
    },
    {
        "id": "sd_sviPcC5dXzxeSL7w",
        "type": "PageVariables",
        "z": "sd_EHqxhFZBDfBQcB9S",
        "viewType": "pages",
        "nodeType": "flow",
        "name": "",
        "inputs": 1,
        "outputs": 1,
        "operation": "set",
        "globalVariables": [
            {
                "textIp": "lineChartData",
                "typedIpValue": {
                    "type": "this.page",
                    "value": "lineChartData"
                }
            },
            {
                "textIp": "lineChartLabels",
                "typedIpValue": {
                    "type": "this.page",
                    "value": "lineChartLabels"
                }
            },
            {
                "textIp": "barChartData",
                "typedIpValue": {
                    "type": "this.page",
                    "value": "barChartData"
                }
            },
            {
                "textIp": "barChartLabels",
                "typedIpValue": {
                    "type": "this.page",
                    "value": "barChartLabels"
                }
            },
            {
                "textIp": "barChartBudget",
                "typedIpValue": {
                    "type": "this.page",
                    "value": "barChartBudget"
                }
            },
            {
                "textIp": "barChartSavings",
                "typedIpValue": {
                    "type": "this.page",
                    "value": "barChartSavings"
                }
            },
            {
                "textIp": "barChartExpenses",
                "typedIpValue": {
                    "type": "this.page",
                    "value": "barChartExpenses"
                }
            },
            {
                "textIp": "barChartOptions",
                "typedIpValue": {
                    "type": "this.page",
                    "value": "barChartOptions"
                }
            },
            {
                "textIp": "insight",
                "typedIpValue": {
                    "type": "this.page",
                    "value": "insight"
                }
            },
            {
                "textIp": "twoMonthAvg",
                "typedIpValue": {
                    "type": "this.page",
                    "value": "twoMonthAvg"
                }
            },
            {
                "textIp": "allYearMaxExpense",
                "typedIpValue": {
                    "type": "this.page",
                    "value": "allYearMaxExpense"
                }
            },
            {
                "textIp": "expensesData",
                "typedIpValue": {
                    "type": "this.page",
                    "value": "expensesData"
                }
            },
            {
                "textIp": "allYearMaxExpenseIndex",
                "typedIpValue": {
                    "type": "this.page",
                    "value": "allYearMaxExpenseIndex"
                }
            },
            {
                "textIp": "maxMonth",
                "typedIpValue": {
                    "type": "this.page",
                    "value": "maxMonth"
                }
            },
            {
                "textIp": "maxExpense",
                "typedIpValue": {
                    "type": "this.page",
                    "value": "maxExpense"
                }
            },
            {
                "textIp": "budgetMinusExpense",
                "typedIpValue": {
                    "type": "this.page",
                    "value": "budgetMinusExpense"
                }
            },
            {
                "textIp": "lessSpent",
                "typedIpValue": {
                    "type": "this.page",
                    "value": "lessSpent"
                }
            },
            {
                "textIp": "moreSpent",
                "typedIpValue": {
                    "type": "this.page",
                    "value": "moreSpent"
                }
            },
            {
                "textIp": "newData2",
                "typedIpValue": {
                    "type": "literal",
                    "value": "[]"
                }
            },
            {
                "textIp": "dataSet",
                "typedIpValue": {
                    "type": "literal",
                    "value": ""
                }
            }
        ],
        "functionName": "sd_sviPcC5dXzxeSL7w",
        "category": "Function",
        "x": 235,
        "y": 60,
        "wires": [
            [
                "sd_GdH0SWDSbz47NoRv"
            ]
        ],
        "__n_excludedFromValidation__": {},
        "generateNext": false,
        "serviceName": "statisticsComponent",
        "generated": true
    },
    {
        "id": "sd_HmysSc28zLxg8P5S",
        "type": "Script",
        "z": "sd_EHqxhFZBDfBQcB9S",
        "viewType": "common",
        "nodeType": "flow",
        "name": "",
        "script": "// page.lineChartData = [\n//         { data: page.newData2 , label: 'Expenses'},\n//     ];\n// page.lineChartLabels = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'June', 'July','Aug','Sep','Oct','nov','dec',];\n\n\n\n\n//Find the max number in expenses and the corresponding month\n// const expensesData = page.lineChartData.find(item => item.label === 'Expenses').data;\n// const { maxExpense, maxIndex } = expensesData.reduce((acc, curr, index) => {\n//     if (curr > acc.maxExpense) {\n//         return { maxExpense: curr, maxIndex: index };\n//     }\n//     return acc;\n// }, { maxExpense: expensesData[0], maxIndex: 0 });\n\n// Get the month corresponding to the max index\n// const maxMonth = page.lineChartLabels[maxIndex];\n//console.log('The maximum number in Expenses is', maxExpense, 'at index', maxIndex, 'corresponding to the month of', maxMonth);\n\n// page.maxExpense = maxExpense\n// page.maxIndex = maxIndex\n// page.maxMonth = maxMonth\n\n// page.barChartData = [\n//         { data: [65, 59], label: 'Monthly Budget' },\n//         { data: [28, 48], label: 'Expanses' },\n//         { data: [47, 40,], label: 'Savings' }\n//     ];\n    \n// page.barChartLabels = ['May', 'June'];\n\n// page.barChartBudget = [\n//         { data: [65, 59], label: 'Monthly Budget' }\n// ]\n\n// page.barChartExpenses = [\n//        { data: [37, 48], label: 'Expenses' }\n// ]\n\n// if(page.barChartExpenses[0].data[0] > page.barChartExpenses[0].data[1]){\n//         console.log(\"If statement, is greater:\", page.barChartExpenses[0].data[0])\n// } else {\n//         console.log(\"If statement, is greater:\", page.barChartExpenses[0].data[1]);\n//         // console.log(\"Month:\", page.barChartLabels[1]);\n//         page.insight = \"You spent more in the month of \" + page.barChartLabels[0] + \" by spending \" + page.barChartExpenses[0].data[1]\n//         console.log(\"hhhhhh\",page.insight)\n// }\n\n// page.diff =  Math.abs(page.barChartExpenses[0].data[1] - page.barChartExpenses[0].data[0] )\n// // page.twoMonthAvg = (page.barChartExpenses[0].data[1] - page.barChartExpenses[0].data[0]) / 2\n// // page.perDiff = (page.diff / page.twoMonthAvg) * 100\n\n// // page.perDiff = ((page.barChartExpenses[0].data[1] - page.barChartExpenses[0].data[0]) / page.barChartExpenses[0].data[0]) * 100\n// page.perDiff = Math.abs(((page.barChartExpenses[0].data[1] - page.barChartExpenses[0].data[0]) / page.barChartExpenses[0].data[0]) * 100)\n\n// // console.log(page.insight, page.diff, page.perDiff.toFixed(2) + \"%\" )\n\n\n// page.barChartSavings = [\n//         { data: [27, 40,], label: 'Savings' }\n// ]\n\n// page.budgetMinusExpense = Math.abs(page.barChartBudget[0].data[0] - page.barChartExpenses[0].data[0])\n// page.lessSpent = \"Actual spending was less than budgeted amount by R \" + page.budgetMinusExpense\n// page.moreSpent = \"Actual spending was more than budgeted amount by R \" + page.budgetMinusExpense + \" . You are advised to watch your savings to ensure that you do not go onto the negative side regularly\"\n\n\n// if(page.barChartExpenses[0].data[0] < page.barChartBudget[0].data[0]){\n// //        console.log(page.lessSpent) \n//        page.newAmount = page.lessSpent\n// } else {\n//         // console.log(page.moreSpent)\n//        page.newAmount = page.moreSpent\n\n// }\n\n\n// page.savedMoreAmt = Math.abs(page.barChartSavings[0].data[0] - page.barChartSavings[0].data[1])\n\n// if(page.barChartSavings[0].data[0] > page.barChartSavings[0].data[1]){\n//         page.savedMoreMonth = \"You saved more last month by saving R \" + page.savedMoreAmt + \" more than you did this month\"\n//         console.log(page.savedMoreMonth)\n// } else {\n//         page.savedMoreMonth = \"You saved more this month by saving R \" + page.savedMoreAmt + \" more than you did last month\"      \n//         console.log( page.savedMoreMonth)\n\n// }",
        "functionName": "sd_HmysSc28zLxg8P5S",
        "category": "Function",
        "x": 160,
        "y": 60,
        "wires": [
            [
                "sd_sviPcC5dXzxeSL7w"
            ]
        ],
        "__n_excludedFromValidation__": {},
        "generateNext": false,
        "serviceName": "statisticsComponent",
        "generated": true
    },
    {
        "id": "sd_GdH0SWDSbz47NoRv",
        "type": "Environment",
        "z": "sd_EHqxhFZBDfBQcB9S",
        "viewType": "client-pages",
        "nodeType": "flow",
        "name": "",
        "outputs": 1,
        "envMaps": [
            {
                "flowVar": {
                    "type": "bh",
                    "value": "ssdURL"
                },
                "envProperty": "ssdURL"
            }
        ],
        "functionName": "sd_GdH0SWDSbz47NoRv",
        "category": "General",
        "x": 320,
        "y": 60,
        "wires": [
            [
                "sd_qqm3czit2D7anmB3"
            ]
        ],
        "__n_excludedFromValidation__": {},
        "generateNext": false,
        "serviceName": "statisticsComponent",
        "generated": true
    },
    {
        "id": "sd_qqm3czit2D7anmB3",
        "type": "Script",
        "z": "sd_EHqxhFZBDfBQcB9S",
        "viewType": "common",
        "nodeType": "flow",
        "name": "",
        "script": "bh.url1 = bh.ssdURL + 'get-budget'\nbh.url2 = bh.ssdURL + 'get-receipt-data'\n\n",
        "functionName": "sd_qqm3czit2D7anmB3",
        "category": "Function",
        "x": 420,
        "y": 60,
        "wires": [
            [
                "sd_SEZAeyvG1j9ff0w8"
            ]
        ],
        "__n_excludedFromValidation__": {},
        "generateNext": false,
        "serviceName": "statisticsComponent",
        "generated": true
    },
    {
        "id": "sd_SEZAeyvG1j9ff0w8",
        "type": "HttpRequest",
        "z": "sd_EHqxhFZBDfBQcB9S",
        "viewType": "client-pages",
        "nodeType": "flow",
        "name": "",
        "method": "get",
        "methodMappingObj": {},
        "urlMapping": "bh.url1",
        "urlMappingObj": {
            "mapVarType": "bh",
            "mapVarValue": "url1"
        },
        "ret": "json",
        "retMappingObj": {},
        "observe": "",
        "observeMappingObj": {},
        "reportProgress": false,
        "withCreds": false,
        "reqBodyObj": {
            "mapVarType": "this.page",
            "mapVarValue": ""
        },
        "resultMapping": "this.page.allYearBudget",
        "resultMappingObj": {
            "mapVarType": "this.page",
            "mapVarValue": "allYearBudget"
        },
        "headers": {},
        "headersObj": [],
        "headerMappingObj": {},
        "params": {},
        "paramsObj": [],
        "paramMappingObj": {},
        "functionName": "sd_SEZAeyvG1j9ff0w8",
        "category": "HTTP",
        "x": 520,
        "y": 60,
        "wires": [
            [
                "sd_FbCEXSfe41G7Z3fa",
                "sd_8aE0PlTSd1RAOH6q"
            ]
        ],
        "__n_excludedFromValidation__": {},
        "generateNext": false,
        "serviceName": "statisticsComponent",
        "generated": true
    },
    {
        "id": "sd_FbCEXSfe41G7Z3fa",
        "type": "HttpRequest",
        "z": "sd_EHqxhFZBDfBQcB9S",
        "viewType": "client-pages",
        "nodeType": "flow",
        "name": "",
        "method": "get",
        "methodMapping": "",
        "methodMappingObj": {},
        "urlMapping": "bh.url2",
        "urlMappingObj": {
            "mapVarType": "bh",
            "mapVarValue": "url2"
        },
        "ret": "json",
        "retMapping": "",
        "retMappingObj": {},
        "observe": "",
        "observeMapping": "",
        "observeMappingObj": {},
        "reportProgress": false,
        "withCreds": false,
        "reqBody": "",
        "reqBodyObj": {
            "mapVarType": "this.page",
            "mapVarValue": ""
        },
        "resultMapping": "this.page.receiptData",
        "resultMappingObj": {
            "mapVarType": "this.page",
            "mapVarValue": "receiptData"
        },
        "headers": {},
        "headersObj": [],
        "headerMapping": "",
        "headerMappingObj": {},
        "params": {},
        "paramsObj": [],
        "paramMapping": "",
        "paramMappingObj": {},
        "functionName": "sd_FbCEXSfe41G7Z3fa",
        "category": "HTTP",
        "x": 605,
        "y": 60,
        "wires": [
            [
                "sd_t1pzThl1Nky4ckT0",
                "sd_e9YVHgGXBH6NP9Mk",
                "sd_dzcNy0FhCjlim4tN"
            ]
        ],
        "__n_excludedFromValidation__": {},
        "generateNext": false,
        "serviceName": "statisticsComponent",
        "generated": true
    },
    {
        "id": "sd_WePnd0dH4lkTVFEH",
        "type": "Script",
        "z": "sd_EHqxhFZBDfBQcB9S",
        "viewType": "common",
        "nodeType": "flow",
        "name": "",
        "script": "page.dataSet =[\n    {data: page.amounts, label: \"Budget\" },\n    {data: page.monthlyExpenses, label: \"Expenses\"}\n]\n\npage.barChartLabels = [\n    {data: page.months}\n]\n\npage.barChartLabels = page.barChartLabels[0].data\n\n",
        "functionName": "sd_WePnd0dH4lkTVFEH",
        "category": "Function",
        "x": 645,
        "y": 280,
        "wires": [
            [
                "sd_vOYHrSZmp7T0yTx2",
                "sd_s61YfQGYWXv8Zy83"
            ]
        ],
        "__n_excludedFromValidation__": {},
        "generateNext": false,
        "serviceName": "statisticsComponent",
        "generated": true
    },
    {
        "id": "sd_8aE0PlTSd1RAOH6q",
        "type": "Script",
        "z": "sd_EHqxhFZBDfBQcB9S",
        "viewType": "common",
        "nodeType": "flow",
        "name": "",
        "script": "page.months = [];\npage.amounts = [];\n\nlet data = page.allYearBudget[0]\n\ndata.budget.forEach(item => {\n  page.months.push(item.month);\n  page.amounts.push(item.amount);\n});\n\n",
        "functionName": "sd_8aE0PlTSd1RAOH6q",
        "category": "Function",
        "x": 545,
        "y": 280,
        "wires": [
            [
                "sd_WePnd0dH4lkTVFEH"
            ]
        ],
        "__n_excludedFromValidation__": {},
        "generateNext": false,
        "serviceName": "statisticsComponent",
        "generated": true
    },
    {
        "id": "sd_vOYHrSZmp7T0yTx2",
        "type": "Script",
        "z": "sd_EHqxhFZBDfBQcB9S",
        "viewType": "common",
        "nodeType": "flow",
        "name": "Calculate savings with non-negative values",
        "script": "\nlet data = page.dataSet\nconst budget = data[0].data;\nconst expenses = data[1].data;\n\nconst savings = budget.map((budgetAmount, index) => {\n  const expenseAmount = expenses[index] || 0; \n  return Math.abs(budgetAmount - expenseAmount);\n});\n\n// Create the savings object\nconst savingsObject = {\n  data: savings,\n  label: \"Savings\"\n};\n\npage.monthlySavings = savingsObject.data\n\npage.dataSet = [\n  {data: page.amounts, label: \"Budget\" },\n  {data: page.monthlyExpenses, label: \"Expenses\"},\n  {data: page.monthlySavings, label: \"Savings\"}\n]\n\n\n",
        "functionName": "calculateSavingsWithNonNegativeValues",
        "category": "Function",
        "x": 825,
        "y": 280,
        "wires": [
            [
                "sd_s3ee5RmIpTy3BDxe"
            ]
        ],
        "__n_excludedFromValidation__": {},
        "generateNext": false,
        "serviceName": "statisticsComponent",
        "generated": true
    },
    {
        "id": "sd_dzcNy0FhCjlim4tN",
        "type": "Script",
        "z": "sd_EHqxhFZBDfBQcB9S",
        "viewType": "common",
        "nodeType": "flow",
        "name": "Chart Two and Insights",
        "script": "const currentDate = new Date();\n\nconst monthNames = [\n  \"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\n  \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\n];\n\nconst currentMonthIndex = currentDate.getMonth();\nconst previousMonthIndex = (currentMonthIndex - 1 + 12) % 12;\n\npage.currentMonth = monthNames[currentMonthIndex];\npage.previousMonth = monthNames[previousMonthIndex];\n\n\nlet data = page.allYearBudget[0].budget\n\n// Find the budget for the current and previous months\nconst currentBudget = data.find(item => item.month === page.currentMonth);\n\nconst previousBudget = data.find(item => item.month === page.previousMonth);\n\n// Store the budgets and corresponding months in separate arrays\nconst budgetAmounts = [previousBudget.amount, currentBudget.amount];\nconst budgetMonths = [previousBudget.month, currentBudget.month];\n\npage.barChartDataTwo = [\n  {data: budgetAmounts, label: \"Budget\"}\n]\npage.barChartDataTwoLabels = [\n  {data: budgetMonths}\n]\n\npage.barChartDataTwoLabels = page.barChartDataTwoLabels[0].data\n\n//Insights for graph\n\nfunction compareAmountsWithMonths(amounts, months) {\n    let result;\n    const difference = Math.abs(amounts[0] - amounts[1]);\n    \n    if (amounts[0] > amounts[1]) {\n        result = `The previous month, ${months[0]}, had a higher budget, R ${amounts[0]}, than the current month, ${months[1]} which has a budget of R ${amounts[1]}. There is a difference of R ${difference} between the two months.`;\n    } else if (amounts[0] < amounts[1]) {\n        result = `The current month, ${months[1]}, has a higher budget of R ${amounts[1]}, which is higher than the previous month, ${months[0]}, which had a budget of R ${amounts[0]}. There is a difference of R ${difference} between the two months.`;\n    } else {\n        result = `Both months, ${months[0]} and ${months[1]}, have the same amount of R ${amounts[0]}.`;\n    }\n    \n    return result;\n}\n\npage.chartTwoInsight = compareAmountsWithMonths(budgetAmounts, budgetMonths)\n\n",
        "functionName": "chartTwoAndInsights",
        "category": "Function",
        "x": 825,
        "y": 180,
        "wires": [
            []
        ],
        "__n_excludedFromValidation__": {},
        "generateNext": false,
        "serviceName": "statisticsComponent",
        "generated": true
    },
    {
        "id": "sd_e9YVHgGXBH6NP9Mk",
        "type": "Script",
        "z": "sd_EHqxhFZBDfBQcB9S",
        "viewType": "common",
        "nodeType": "flow",
        "name": "fourth chart",
        "script": "let data = page.receiptData;\nfunction getCategoryWithMostExpenditure(data) {\n  const categorySumsByMonth = {};\n  const monthNames = [\n    \"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\n    \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\n  ];\n\n  // Helper function to format month and year\n  const formatMonthYear = (date) => `${monthNames[date.getMonth()]} ${date.getFullYear()}`;\n\n  // Calculate sums by category for each month\n  data.forEach(entry => {\n    const uploadedDate = new Date(entry[\"Date-Uploaded\"]);\n    const monthYear = formatMonthYear(uploadedDate);\n\n    if (!categorySumsByMonth[monthYear]) {\n      categorySumsByMonth[monthYear] = {};\n    }\n\n    entry.items.forEach(item => {\n      const categoryKey = Object.keys(item).find(key => key.startsWith('category'));\n      const priceKey = Object.keys(item).find(key => key.startsWith('price'));\n\n      if (categoryKey && priceKey) {\n        const category = item[categoryKey];\n        const price = item[priceKey];\n\n        if (!categorySumsByMonth[monthYear][category]) {\n          categorySumsByMonth[monthYear][category] = 0;\n        }\n\n        categorySumsByMonth[monthYear][category] += price;\n      }\n    });\n  });\n\n  // Get the current and previous month\n  const currentDate = new Date();\n  const currentMonthYear = formatMonthYear(currentDate);\n  const previousMonthDate = new Date(currentDate.getFullYear(), currentDate.getMonth() - 1, 1);\n  const previousMonthYear = formatMonthYear(previousMonthDate);\n\n  // Helper function to get category with the most expenditure\n  const getMaxCategory = (sums) => {\n    let maxCategory = null;\n    let maxAmount = -1;\n    for (let category in sums) {\n      if (sums[category] > maxAmount) {\n        maxAmount = sums[category];\n        maxCategory = category;\n      }\n    }\n    return { category: maxCategory, amount: maxAmount };\n  };\n\n  const currentMonthMax = categorySumsByMonth[currentMonthYear]\n    ? getMaxCategory(categorySumsByMonth[currentMonthYear])\n    : { category: null, amount: 0 };\n\n  const previousMonthMax = categorySumsByMonth[previousMonthYear]\n    ? getMaxCategory(categorySumsByMonth[previousMonthYear])\n    : { category: null, amount: 0 };\n\n  return { currentMonthMax, previousMonthMax };\n}\n\nconst expenditureData = getCategoryWithMostExpenditure(data);\npage.prevMonthMostCategory = expenditureData.previousMonthMax.category;\npage.currenttMonthMaxCatetory = expenditureData.currentMonthMax.category;\n\nlet currentMonthCat = page.currenttMonthMaxCatetory;\nlet prevMonthCat = page.prevMonthMostCategory;\n\nconst previousMonthMaxAmount = expenditureData.previousMonthMax.amount;\nconst currentMonthMaxAmount = expenditureData.currentMonthMax.amount;\n\npage.prevMonthMaxCatAmt = previousMonthMaxAmount\npage.currMonthMaxCatAmt = currentMonthMaxAmount\n\npage.fourthChartData = [\n  { data: [previousMonthMaxAmount, currentMonthMaxAmount], label : [currentMonthCat, prevMonthCat]}\n];\n\n\npage.fourthChartLabels = [currentMonthCat, prevMonthCat];\n\n\n\n\n\n\n",
        "functionName": "fourthChart",
        "category": "Function",
        "x": 945,
        "y": 80,
        "wires": [
            [
                "sd_93qcqkrPGMtTfP6B"
            ]
        ],
        "__n_excludedFromValidation__": {},
        "generateNext": false,
        "serviceName": "statisticsComponent",
        "generated": true
    },
    {
        "id": "sd_93qcqkrPGMtTfP6B",
        "type": "Script",
        "z": "sd_EHqxhFZBDfBQcB9S",
        "viewType": "common",
        "nodeType": "flow",
        "name": "fourth",
        "script": "let data = page.receiptData\n\nfunction getCategoryWithMostExpenditure(data) {\n  const categorySumsByMonth = {};\n  const monthNames = [\n    \"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\n    \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\n  ];\n\n  // Helper function to format month and year\n  const formatMonthYear = (date) => `${monthNames[date.getMonth()]} ${date.getFullYear()}`;\n\n  // Calculate sums by category for each month\n  data.forEach(entry => {\n    const uploadedDate = new Date(entry[\"Date-Uploaded\"]);\n    const monthYear = formatMonthYear(uploadedDate);\n\n    if (!categorySumsByMonth[monthYear]) {\n      categorySumsByMonth[monthYear] = { Groceries: 0, Maintenance: 0, Supplies: 0 };\n    }\n\n    entry.items.forEach(item => {\n      if (categorySumsByMonth[monthYear][item.category] !== undefined) {\n        categorySumsByMonth[monthYear][item.category] += item.price;\n      }\n    });\n  });\n\n  // Get the current and previous month\n  const currentDate = new Date();\n  const currentMonthYear = formatMonthYear(currentDate);\n  const previousMonthDate = new Date(currentDate.getFullYear(), currentDate.getMonth() - 1, 1);\n  const previousMonthYear = formatMonthYear(previousMonthDate);\n\n\n  // Helper function to get category with the most expenditure\n  const getMaxCategory = (sums) => {\n    let maxCategory = null;\n    let maxAmount = -1;\n    for (let category in sums) {\n      if (sums[category] > maxAmount) {\n        maxAmount = sums[category];\n        maxCategory = category;\n      }\n    }\n    return { category: maxCategory, amount: maxAmount };\n  };\n\n  const currentMonthMax = categorySumsByMonth[currentMonthYear]\n    ? getMaxCategory(categorySumsByMonth[currentMonthYear])\n    : null;\n\n  const previousMonthMax = categorySumsByMonth[previousMonthYear]\n    ? getMaxCategory(categorySumsByMonth[previousMonthYear])\n    : null;\n\n  return { currentMonthMax, previousMonthMax };\n}\n\npage.fifthDataChart = [\n  {data: getCategoryWithMostExpenditure(data).previousMonthMax.amount, label: getCategoryWithMostExpenditure(data).previousMonthMax.category}\n]\n\n",
        "functionName": "fourth",
        "category": "Function",
        "x": 1105,
        "y": 80,
        "wires": [
            []
        ],
        "__n_excludedFromValidation__": {},
        "generateNext": false,
        "serviceName": "statisticsComponent",
        "generated": true
    },
    {
        "id": "sd_s3ee5RmIpTy3BDxe",
        "type": "Script",
        "z": "sd_EHqxhFZBDfBQcB9S",
        "viewType": "common",
        "nodeType": "flow",
        "name": "fifth Chart Data",
        "script": "// const monthNames = [\n//   \"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\n//   \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\n// ];\n\n// page.currentMonthIndex = new Date().getMonth();\n// page.currentMonth = monthNames[page.currentMonthIndex];\n// page.previousMonthIndex = (page.currentMonthIndex - 1 + 12) % 12;\n// page.previousMonth = monthNames[page.previousMonthIndex];\n\n// let responseData = page.dataSet\n// const savingsData = responseData.find(item => item.label === \"Savings\").data;\n\n// page.currentMonthSavings = savingsData[page.currentMonthIndex];\n// page.previousMonthSavings = savingsData[page.previousMonthIndex];\n\n// page.fifthChartData = [\n//     {data: [page.currentMonthSavings, page.previousMonthSavings], label: \"Savings\"}\n// ]\n\n// const page = page || {}; // Initialize page object if not already done\n\n\nconst monthNames = [\n  \"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\n  \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\n];\n\n// Get current month and previous month indexes\npage.currentMonthIndex = new Date().getMonth();\npage.currentMonth = monthNames[page.currentMonthIndex];\npage.previousMonthIndex = (page.currentMonthIndex - 1 + 12) % 12;\npage.previousMonth = monthNames[page.previousMonthIndex];\n\nlet responseData = page.dataSet;\n\n// Find the savings data in the response\nconst savingsData = responseData.find(item => item.label === \"Savings\").data;\n\n// Get current and previous month savings\npage.currentMonthSavings = savingsData[page.currentMonthIndex];\npage.previousMonthSavings = savingsData[page.previousMonthIndex];\n\n// Prepare the fifth chart data\npage.fifthChartData = [\n    {data: [page.previousMonthSavings, page.currentMonthSavings], label: \"Savings\"}\n];\n\n\nfunction mostSavingsMonth(data) {\n    let result;\n    const difference = Math.abs(data[0] - data[1]);\n    \n    if (data[0] > data[1]) {\n        result = `The previous month had more savings, R ${data[0]}, than the current month, which currently has savings of R ${data[1]}. There is a difference of R ${difference} between the two months.`;\n    } else if (data[0] < data[1]) {\n        result = `The current month, currently has more savings, R ${data[1]}, than the previous month, which currently has savings of R ${data[0]}. There is a difference of R ${difference} between the two months.`;\n    } else {\n        result = `Both months have the same amount of savings`;\n    }\n    return result;\n}\n\npage.finalChartResult = mostSavingsMonth(page.fifthChartData[0].data)\n\n\n",
        "functionName": "fifthChartData",
        "category": "Function",
        "x": 1065,
        "y": 400,
        "wires": [
            []
        ],
        "__n_excludedFromValidation__": {},
        "generateNext": false,
        "serviceName": "statisticsComponent",
        "generated": true
    },
    {
        "id": "sd_s61YfQGYWXv8Zy83",
        "type": "Script",
        "z": "sd_EHqxhFZBDfBQcB9S",
        "viewType": "common",
        "nodeType": "flow",
        "name": "Insights for chart 1",
        "script": "const months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n\nlet dataArray = page.dataSet\nlet expensesData = page.dataSet[1].data\nlet savingsData = page.dataSet[2].data\n\nfunction findHighest(dataArray) {\n    let maxIndex = 0;\n    for (let i = 1; i < dataArray.length; i++) {\n        if (dataArray[i] > dataArray[maxIndex]) {\n            maxIndex = i;\n        }\n    }\n    return {\n        month: months[maxIndex],\n        amount: dataArray[maxIndex]\n    };\n}\n\nconst highestExpenses = findHighest(expensesData);\nconst highestSavings = findHighest(savingsData);\n\npage.highestExpenses1 = highestExpenses\npage.highestExpenses1Month = page.highestExpenses1.month\npage.highestExpenses1Amt = page.highestExpenses1.amount\n\npage.highestSavings1 = findHighest(savingsData);\npage.highestSavings1Month = page.highestSavings1.month\npage.highestSavings1Amt = page.highestSavings1.amount\n\n",
        "functionName": "insightsForChart1",
        "category": "Function",
        "x": 780,
        "y": 440,
        "wires": [
            []
        ],
        "__n_excludedFromValidation__": {},
        "generateNext": false,
        "serviceName": "statisticsComponent",
        "generated": true
    },
    {
        "id": "sd_t1pzThl1Nky4ckT0",
        "type": "Script",
        "z": "sd_EHqxhFZBDfBQcB9S",
        "viewType": "common",
        "nodeType": "flow",
        "name": "Graph One",
        "script": "// Function to parse the month and year from the date\nfunction parseMonth(dateStr) {\n  const [year, month, day] = dateStr.split('/');\n  const date = new Date(year, month - 1, day);\n  const monthIndex = date.getMonth(); \n  const yearIndex = date.getFullYear();\n  const monthNames = [\n    \"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\n    \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\n  ];\n  return `${monthNames[monthIndex]} ${yearIndex}`;\n}\n\n// Create a map to store the totals for each month\nconst monthlyTotalsMap = {};\nlet nData = page.receiptData; // Assuming page.receiptData contains the API data\n\n// Iterate through the data and update the map\nnData.forEach(entry => {\n  const monthYear = parseMonth(entry[\"Date-Uploaded\"]);\n  if (!monthlyTotalsMap[monthYear]) {\n    monthlyTotalsMap[monthYear] = 0;\n  }\n  monthlyTotalsMap[monthYear] += entry.totalAmount;\n});\n\n// Separate the keys and values into two arrays\nconst months = Object.keys(monthlyTotalsMap);\npage.monthlyExpenses = Object.values(monthlyTotalsMap);\n\n\n\n\n\n\n\n\n\n\n\n// // Function to parse the month and year from the date\n// function parseMonth(dateStr) {\n//   const [month, day, year] = dateStr.split('/');\n//   const date = new Date(year, month - 1, day);\n//   const monthIndex = date.getMonth(); \n//   const monthNames = [\n//     \"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\n//     \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\n//   ];\n//   return monthNames[monthIndex];\n// }\n\n// // Create a map to store the totals for each month\n// const monthlyTotalsMap = {};\n// let nData = page.receiptData; // Assuming page.receiptData contains the API data\n\n// // Iterate through the data and update the map\n// nData.forEach(entry => {\n//   const month = parseMonth(entry[\"Date-Uploaded\"]);\n//   if (!monthlyTotalsMap[month]) {\n//     monthlyTotalsMap[month] = 0;\n//   }\n//   monthlyTotalsMap[month] += entry.totalAmount;\n// });\n\n// // Separate the keys and values into two arrays\n// const months = Object.keys(monthlyTotalsMap);\n// page.monthlyExpenses = Object.values(monthlyTotalsMap);\n\n// console.log(\"ex\", page.monthlyExpenses)\n\n",
        "functionName": "graphOne",
        "category": "Function",
        "x": 645,
        "y": 160,
        "wires": [
            [
                "sd_8aE0PlTSd1RAOH6q"
            ]
        ],
        "__n_excludedFromValidation__": {},
        "generateNext": false,
        "serviceName": "statisticsComponent",
        "generated": true
    }
]
